apply plugin: 'com.android.application'

android {
    namespace "com.zodiacgym.app"
    compileSdk rootProject.ext.compileSdkVersion
    defaultConfig {
        applicationId "com.zodiacgym.app"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        aaptOptions {
             ignoreAssetsPattern '!.svn:!.git:!.ds_store:!*.scc:.*:!CVS:!thumbs.db:!picasa.ini:!*~'
        }
    }

    // --- AÑADE ESTO AQUÍ ---
    signingConfigs {
        release {
            // Intenta leer desde variables de entorno (para CI/CD)
            // o desde keystore.properties (para builds locales si lo tienes)
            if (System.getenv("ANDROID_KEYSTORE_FILE") != null) {
                storeFile file(System.getenv("ANDROID_KEYSTORE_FILE")) // En CI/CD, este será el nombre del archivo decodificado, ej: "release-keystore.jks"
                storePassword System.getenv("ANDROID_KEYSTORE_PASSWORD")
                keyAlias System.getenv("ANDROID_KEY_ALIAS")
                keyPassword System.getenv("ANDROID_KEY_PASSWORD")
            } else if (project.hasProperty('keystorePropertiesFile')) {
                // Fallback a keystore.properties para builds locales
                // Necesitarías crear android/keystore.properties con los datos de tu keystore
                // y en android/gradle.properties añadir: keystorePropertiesFile=keystore.properties
                def propsFile = file(project.keystorePropertiesFile)
                if (propsFile.exists()) {
                    def props = new Properties()
                    props.load(new FileInputStream(propsFile))
                    storeFile file(props['storeFile']) // Ej: props.load(new FileInputStream(file('../app/release-keystore.jks')))
                    storePassword props['storePassword']
                    keyAlias props['keyAlias']
                    keyPassword props['keyPassword']
                }
            }
        }
    }
    // --- FIN DE LO AÑADIDO ---

    buildTypes {
        release {
            minifyEnabled false // Puedes cambiarlo a true para optimizar el tamaño, pero prueba bien
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release // <-- ASEGÚRATE QUE ESTA LÍNEA SE AÑADA O MODIFIQUE
        }
    }
}

repositories {
    flatDir{
        dirs '../capacitor-cordova-android-plugins/src/main/libs', 'libs'
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation "androidx.appcompat:appcompat:$androidxAppCompatVersion"
    implementation "androidx.coordinatorlayout:coordinatorlayout:$androidxCoordinatorLayoutVersion"
    implementation "androidx.core:core-splashscreen:$coreSplashScreenVersion"
    implementation project(':capacitor-android')
    testImplementation "junit:junit:$junitVersion"
    androidTestImplementation "androidx.test.ext:junit:$androidxJunitVersion"
    androidTestImplementation "androidx.test.espresso:espresso-core:$androidxEspressoCoreVersion"
    implementation project(':capacitor-cordova-android-plugins')
}

apply from: 'capacitor.build.gradle'

try {
    def servicesJSON = file('google-services.json')
    if (servicesJSON.text) {
        apply plugin: 'com.google.gms.google-services'
    }
} catch(Exception e) {
    logger.info("google-services.json not found, google-services plugin not applied. Push Notifications won't work")
}
